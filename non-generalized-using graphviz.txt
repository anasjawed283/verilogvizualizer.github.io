import graphviz

# Parse Verilog code and extract state information
verilog_code = """
module FiveStagePipeline (
  input clk,
  input reset,
  input [7:0] data_in,
  output [7:0] data_out
);

  reg [7:0] stage1;
  reg [7:0] stage2;
  reg [7:0] stage3;
  reg [7:0] stage4;
  reg [7:0] stage5;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      stage1 <= 8'b0;
      stage2 <= 8'b0;
      stage3 <= 8'b0;
      stage4 <= 8'b0;
      stage5 <= 8'b0;
    end
    else begin
      stage1 <= data_in;
      stage2 <= stage1;
      stage3 <= stage2;
      stage4 <= stage3;
      stage5 <= stage4;
    end
  end

  assign data_out = stage5;

endmodule
"""

# Extract states and transitions from parsed Verilog code
states = []
transitions = []

lines = verilog_code.splitlines()
for line in lines:
    line = line.strip()
    if line.startswith("reg") or line.startswith("wire"):
        state_name = line.split()[2].rstrip(";")
        states.append(state_name)
    elif "<=" in line:
        lhs, rhs = line.split("<=")
        lhs = lhs.strip()
        rhs = rhs.strip(";").strip()
        transitions.append((lhs, rhs))

# Create a Directed Graph (Digraph)
G = graphviz.Digraph('finite_state_machine', filename='state_diagram.gv')
G.attr(rankdir='LR', size='8,5')

# Add nodes (states) to the graph
for state in states:
    G.node(state)

# Add edges (transitions) to the graph
for transition in transitions:
    G.edge(*transition)

# Save the state diagram to a file and view it
G.render(view=True)
